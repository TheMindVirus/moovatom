[UNITY_MATRIX_V][Direction of White Sphere]
1 = 90
A = Any Rotation
Z = Rotation Invariant (Always 0)
O = Rotation Invariant (Always 1)
P# = Pivot Orbit Rotation
C# = Camera Look Rotation
Camera position is [0, 0, -1]
Everything else is [0, 0, 0]
[0].x = PX: A, PY: 0, PZ: 0, CX: A, CY: 0, CZ: 0
[0].y = PX: 0, PY: A, PZ: 1, CX: A, CY: 0, CZ: 0
[0].z = PX: A, PY: 3, PZ: 0, CX: A, CY: 0, CZ: 0
[0].w = PX: A, PY: A, PZ: A, CX: A, CY: 3, CZ: 0
[1].x = PX: A, PY: 0, PZ: 3, CX: 0, CY: A, CZ: 0
[1].y = PX: 0, PY: A, PZ: 0, CX: 0, CY: A, CZ: 0
[1].z = PX: 1, PY: 0, PZ: 0, CX: 0, CY: A, CZ: 0
[1].w = PX: A, PY: A, PZ: A, CX: 3, CY: 0, CZ: 0
[2].x = PX: 0, PY: 3, PZ: A, CX: 0, CY: 0, CZ: A
[2].y = PX: 3, PY: A, PZ: A, CX: 0, CY: 0, CZ: A
[2].z = PX: 0, PY: 2, PZ: A, CX: 0, CY: 0, CZ: A
[2].w = PX: A, PY: A, PZ: A, CX: A, CY: 2, CZ: A
[3].x = PX: Z, PY: Z, PZ: Z, CX: Z, CY: Z, CZ: Z
[3].y = PX: Z, PY: Z, VZ: Z, CX: Z, CY: Z, CZ: Z
[3].z = PX: Z, PY: Z, PZ: Z, CX: Z, CY: Z, CZ: Z
[3].w = PX: O, PY: O, PZ: O, CX: O, CY: O, CZ: O
The w may be encoding screen-relative points
Though the z for screen is unclear
There are dual axis locks in effect
Current Layout:
[ LockYZ, -LockXZ, -LockYZ,  ScreenX]
[-LockYZ,  LockXZ,  LockYZ,  ScreenY]
[-LockXY,  Lock0Z, -LockXZ, -ScreenZ] //Anything Positive gets culled?
[      0,       0,       0,        1]

[ X, Y, X, CX]
[ X, Y, X, CY]
[ Z,XY, Y, CZ] //This looks...odd...
[ 0, 0, 0,  1]

UNITY_MATRIX_I_V is available but is not strictly the inverse of UNITY_MATRIX_V.
UNITY_MATRIX_I_V[?].w encodes _WorldSpaceCameraPos but not the other way around.